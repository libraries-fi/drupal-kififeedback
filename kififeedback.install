<?php

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\kififeedback\LogEntryInterface;

function kififeedback_install() {
  if (!Drupal::moduleHandler()->moduleExists('kifi_feedback')) {
    return;
  }

  /*
   * Convert messages from old feedback module to new format.
   */

  $feedback_storage = Drupal::entityTypeManager()->getStorage('kififeedback');
  $log_storage = Drupal::entityTypeManager()->getStorage('kififeedback_log');
  $messages = Drupal::entityTypeManager()->getStorage('kifi_feedback_message')->loadMultiple();

  foreach ($messages as $message) {
    $feedback = $feedback_storage->create([
      'channel' => 'default',
      'id' => $message->id(),
      'uuid' => $message->get('uuid')->value,
      'name' => $message->getSender(),
      'email' => $message->getEmail(),
      'created' => strtotime($message->getCreated()),
      'comment' => $message->getComment(),
      'subject' => $message->getSubject(),
      'body' => ['value' => $message->getMessage(), 'format' => 'plain_text'],
    ]);

    // Saving here is required to avoid infinite recursion.
    $feedback->save();

    if ($message->isReplySent()) {
      $entry = $log_storage->create([
        'action' => LogEntryInterface::ACTION_RESPOND,
        'message' => ['value' => $message->getReply(), 'format' => 'plain_text'],
        'user' => $message->getReplySender(),
        'created' => strtotime($message->getReplyDate()),
      ]);

      $feedback->addActionToLog($entry);
    }

    if ($message->isForwarded()) {
      $entry = $log_storage->create([
        'action' => LogEntryInterface::ACTION_FORWARD,
        'message' => ['value' => '[old message, no log]', 'format' => 'plain_text'],
        'user' => $message->getForwardedBy(),
        'created' => strtotime($message->getForwardDate()),
      ]);

      $feedback->addActionToLog($entry);
    }

    // Save to store log entries.
    $feedback->save();
  }
}

function kififeedback_update_8001() {
  
  $storage_definition = BaseFieldDefinition::create('boolean')
    ->setLabel(new TranslatableMarkup('Accessibility feedback'))
    ->setDefaultValue(false)
    ->setDisplayOptions('form', ['type' => 'boolean_checkbox', 'settings' => ['display_label' => TRUE], 'weight' => -1]);
  
  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('is_accessibility_feedback', 'kififeedback', 'kififeedback', $storage_definition);
}

function kififeedback_uninstall() {
  $storage = Drupal::entityTypeManager()->getStorage('kifimail');
  $entities = $storage->loadMultiple(['kififeedback_forward', 'kififeedback_reply']);
  $storage->delete($entities);
}
